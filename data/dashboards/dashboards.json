[
  {
    "id": "dashboard_1753305187547_cvai6yi9m",
    "name": "Turbine Status by Location",
    "description": "Status overview of turbines at each location.",
    "tags": [],
    "createdAt": "2025-07-23T21:13:07.547Z",
    "updatedAt": "2025-07-23T21:13:07.547Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusOverview() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines')\n      const turbines = await response.json()\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location\n        const status = turbine.status\n        if (!acc[location]) {\n          acc[location] = {}\n        }\n        acc[location][status] = (acc[location][status] || 0) + 1\n        return acc\n      }, {})\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n        location,\n        ...statusCounts\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const COLORS = { Active: 'hsl(var(--chart-1))', Warning: 'hsl(var(--chart-2))', Offline: 'hsl(var(--chart-3))' }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  const renderBarChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={data}>\n        <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"location\" tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }}/>\n        <YAxis tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }}/>\n        <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '6px', color: 'hsl(var(--card-foreground))' }} />\n        {['Active', 'Warning', 'Offline'].map(status => (\n          <Bar key={status} dataKey={status} fill={COLORS[status]} stackId=\"a\" />\n        ))}\n      </BarChart>\n    </ResponsiveContainer>\n  )\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderBarChart()}\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "async () => {\n  try {\n    const response = await fetch('/api/data/turbines')\n    const turbines = await response.json()\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location\n      const status = turbine.status\n      if (!acc[location]) {\n        acc[location] = {}\n      }\n      acc[location][status] = (acc[location][status] || 0) + 1\n      return acc\n    }, {})\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n      location,\n      ...statusCounts\n    }))\n    return chartData\n  } catch (error) {\n    console.error('Error fetching data:', error)\n    return []\n  }\n}",
    "query": "Show turbine status overview by location with maintenance and warning indicators",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753306363445_cx5niz7oz",
    "name": "Turbine Status by Location",
    "description": "Shows turbine status distribution across locations.",
    "tags": [],
    "createdAt": "2025-07-23T21:32:43.445Z",
    "updatedAt": "2025-07-23T21:32:43.445Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocation() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines')\n      const turbines = await response.json()\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location\n        const status = turbine.status\n        if (!acc[location]) {\n          acc[location] = { }\n        }\n        acc[location][status] = (acc[location][status] || 0) + 1\n        return acc\n      }, {})\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => ({\n        location,\n        ...statuses,\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const COLORS = {\n    Active: 'hsl(var(--chart-1))',\n    Warning: 'hsl(var(--chart-2))',\n    Offline: 'hsl(var(--chart-3))',\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={data}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"location\" tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }}/>\n            <YAxis tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }}/>\n            <Tooltip \n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))'\n              }}\n            />\n            <Bar dataKey=\"Active\" fill={COLORS.Active} stackId=\"a\" />\n            <Bar dataKey=\"Warning\" fill={COLORS.Warning} stackId=\"a\" />\n            <Bar dataKey=\"Offline\" fill={COLORS.Offline} stackId=\"a\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "async () => {\n  try {\n    const response = await fetch('/api/data/turbines')\n    const turbines = await response.json()\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location\n      const status = turbine.status\n      if (!acc[location]) {\n        acc[location] = { }\n      }\n      acc[location][status] = (acc[location][status] || 0) + 1\n      return acc\n    }, {})\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => ({\n      location,\n      ...statuses,\n    }))\n    return chartData\n  } catch (error) {\n    console.error('Error fetching data:', error)\n    return []\n  }\n}",
    "query": "Show turbine status overview by location with maintenance and warning indicators",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753307078896_f1xb53ux5",
    "name": "Turbine Status by Location",
    "description": "Overview of turbine status distribution across locations.",
    "tags": [],
    "createdAt": "2025-07-23T21:44:38.896Z",
    "updatedAt": "2025-07-23T21:44:38.896Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocation() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchTurbineData()\n  }, [])\n\n  const fetchTurbineData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines')\n      const turbines = await response.json()\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location\n        const status = turbine.status\n        if (!acc[location]) {\n          acc[location] = {}\n        }\n        acc[location][status] = (acc[location][status] || 0) + 1\n        return acc\n      }, {})\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n        location,\n        ...statusCounts,\n      }))\n\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  const statusKeys = ['Active', 'Warning', 'Offline']\n  const COLORS = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))']\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"location\" tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }} />\n            <YAxis tick={{ fill: 'hsl(var(--muted-foreground))' }} axisLine={{ stroke: 'hsl(var(--border))' }} />\n            <Tooltip \n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))'\n              }}\n            />\n            {statusKeys.map((status, index) => (\n              <Bar key={status} dataKey={status} stackId=\"a\" fill={COLORS[index % COLORS.length]} />\n            ))}\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const processTurbineData = (turbines) => {\n  try {\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location;\n      const status = turbine.status;\n      if (!acc[location]) {\n        acc[location] = {};\n      }\n      acc[location][status] = (acc[location][status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n      location,\n      ...statusCounts,\n    }));\n\n    return chartData;\n  } catch (error) {\n    console.error('Error processing turbine data:', error);\n    return [];\n  }\n}",
    "query": "Show turbine status overview by location with maintenance and warning indicators",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753310236354_sw6i7l819",
    "name": "Turbine Status by Location",
    "description": "Overview of turbine status distribution across locations.",
    "tags": [],
    "createdAt": "2025-07-23T22:37:16.354Z",
    "updatedAt": "2025-07-23T22:37:16.354Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusOverview() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchTurbineData()\n  }, [])\n\n  const fetchTurbineData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines')\n      const turbines = await response.json()\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location\n        const status = turbine.status\n        if (!acc[location]) {\n          acc[location] = {}\n        }\n        acc[location][status] = (acc[location][status] || 0) + 1\n        return acc\n      }, {})\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => {\n        return {\n          location: location,\n          Active: statuses.Active || 0,\n          Warning: statuses.Warning || 0,\n          Offline: statuses.Offline || 0,\n        }\n      })\n\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"location\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Location', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Turbines', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            <Bar dataKey=\"Active\" name=\"Active\" fill=\"hsl(var(--chart-1))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Warning\" name=\"Warning\" fill=\"hsl(var(--chart-2))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Offline\" name=\"Offline\" fill=\"hsl(var(--chart-3))\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const processTurbineData = async () => {\n  try {\n    const response = await fetch('/api/data/turbines')\n    const turbines = await response.json()\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location\n      const status = turbine.status\n      if (!acc[location]) {\n        acc[location] = {}\n      }\n      acc[location][status] = (acc[location][status] || 0) + 1\n      return acc\n    }, {})\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => {\n      return {\n        location: location,\n        Active: statuses.Active || 0,\n        Warning: statuses.Warning || 0,\n        Offline: statuses.Offline || 0,\n      }\n    })\n\n    return chartData\n\n  } catch (error) {\n    console.error('Error fetching data:', error)\n    return []\n  }\n}",
    "query": "Show turbine status overview by location with maintenance and warning indicators",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753310429892_3dqcq5j61",
    "name": "Turbine Status by Location",
    "description": "Overview of turbine status across different locations.",
    "tags": [],
    "createdAt": "2025-07-23T22:40:29.892Z",
    "updatedAt": "2025-07-23T22:40:29.892Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocation() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchTurbineData();\n  }, []);\n\n  const fetchTurbineData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines');\n      const turbines = await response.json();\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location;\n        const status = turbine.status;\n        if (!acc[location]) {\n          acc[location] = {};\n        }\n        acc[location][status] = (acc[location][status] || 0) + 1;\n        return acc;\n      }, {});\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n        location: location,\n        Active: statusCounts['Active'] || 0,\n        Warning: statusCounts['Warning'] || 0,\n        Offline: statusCounts['Offline'] || 0,\n      }));\n      setData(chartData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"location\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Location', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Turbine Count', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            <Bar dataKey=\"Active\" name=\"Active\" fill=\"hsl(var(--chart-1))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Warning\" name=\"Warning\" fill=\"hsl(var(--chart-2))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Offline\" name=\"Offline\" fill=\"hsl(var(--chart-3))\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const processTurbineData = (turbines) => {\n  try {\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location;\n      const status = turbine.status;\n      if (!acc[location]) {\n        acc[location] = {};\n      }\n      acc[location][status] = (acc[location][status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n      location: location,\n      Active: statusCounts['Active'] || 0,\n      Warning: statusCounts['Warning'] || 0,\n      Offline: statusCounts['Offline'] || 0,\n    }));\n    return chartData;\n  } catch (error) {\n    console.error('Error processing turbine data:', error);\n    return [];\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753310481730_ieacr3a04",
    "name": "Turbine Status by Location",
    "description": "Shows turbine status distribution across locations.",
    "tags": [],
    "createdAt": "2025-07-23T22:41:21.730Z",
    "updatedAt": "2025-07-23T22:41:21.730Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocation() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines')\n      const turbines = await response.json()\n\n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const location = turbine.location\n        const status = turbine.status\n\n        if (!acc[location]) {\n          acc[location] = {}\n        }\n\n        acc[location][status] = (acc[location][status] || 0) + 1\n        return acc\n      }, {})\n\n      const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n        location,\n        ...statusCounts\n      }))\n\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const COLORS = { // Defining colors for the statuses\n    'Active': 'hsl(var(--chart-1))',  // Blue\n    'Warning': 'hsl(var(--chart-2))', // Red\n    'Offline': 'hsl(var(--chart-3))'  // Grey\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"location\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Location', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Count', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            {Object.keys(COLORS).map(status => (\n              <Bar key={status} dataKey={status} stackId=\"a\" fill={COLORS[status]} name={status} radius={[4, 4, 0, 0]} />\n            ))}\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchData = async () => {\n  try {\n    const response = await fetch('/api/data/turbines');\n    const turbines = await response.json();\n\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location;\n      const status = turbine.status;\n\n      if (!acc[location]) {\n        acc[location] = {};\n      }\n\n      acc[location][status] = (acc[location][status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const chartData = Object.entries(locationStatusCounts).map(([location, statusCounts]) => ({\n      location,\n      ...statusCounts\n    }));\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators use red and blue coloring",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753312694990_h9ebilht8",
    "name": "Turbine Status by Location",
    "description": "A comparative overview of turbine operational statuses (Active, Warning, Offline) across different wind farm locations.",
    "tags": [],
    "createdAt": "2025-07-23T23:18:14.990Z",
    "updatedAt": "2025-07-23T23:18:14.990Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocationChart() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/data/turbines')\n        const turbines = await response.json()\n        \n        const locationStatusCounts = turbines.reduce((acc, turbine) => {\n          const { location, status } = turbine;\n          if (!acc[location]) {\n            acc[location] = { Active: 0, Warning: 0, Offline: 0 };\n          }\n          if (status in acc[location]) {\n            acc[location][status]++;\n          }\n          return acc;\n        }, {});\n\n        const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => ({\n          location,\n          ...statuses\n        }));\n\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching turbine status data:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-96\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status Overview by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart \n            data={data} \n            margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"location\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              tickLine={false}\n            />\n            <YAxis \n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              tickLine={false}\n              label={{ value: 'Number of Turbines', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ fill: 'hsla(var(--muted), 0.5)' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend \n              verticalAlign=\"top\" \n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            <Bar dataKey=\"Active\" stackId=\"a\" name=\"Active\" fill=\"hsl(var(--chart-1))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Warning\" stackId=\"a\" name=\"Warning\" fill=\"hsl(var(--chart-2))\" radius={[4, 4, 0, 0]} />\n            <Bar dataKey=\"Offline\" stackId=\"a\" name=\"Offline\" fill=\"hsl(var(--chart-4))\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchLocationStatusData = async () => {\n  try {\n    const response = await fetch('/api/data/turbines');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const turbines = await response.json();\n\n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const { location, status } = turbine;\n      // Initialize the location object if it doesn't exist\n      if (!acc[location]) {\n        acc[location] = { Active: 0, Warning: 0, Offline: 0 };\n      }\n      // Increment the count for the turbine's status\n      if (status in acc[location]) {\n        acc[location][status]++;\n      }\n      return acc;\n    }, {});\n\n    // Convert the aggregated object into an array for the chart\n    const chartData = Object.entries(locationStatusCounts).map(([location, statuses]) => ({\n      location,\n      ...statuses\n    }));\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching or processing turbine status data:', error);\n    return []; // Return an empty array in case of an error\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators use red and blue coloring",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753312858264_mqf56jhl6",
    "name": "Wind Speed and Power Correlation",
    "description": "Scatter plot showing the correlation between wind speed and power output, grouped by wind farm location.",
    "tags": [],
    "createdAt": "2025-07-23T23:20:58.264Z",
    "updatedAt": "2025-07-23T23:20:58.264Z",
    "chartType": "custom",
    "componentCode": "function WindPowerCorrelationChart() {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [turbinesRes, telemetryRes] = await Promise.all([\n          fetch('/api/data/turbines'),\n          fetch('/api/data/telemetry?limit=150')\n        ]);\n\n        if (!turbinesRes.ok || !telemetryRes.ok) {\n          throw new Error('Failed to fetch data sources');\n        }\n\n        const turbines = await turbinesRes.json();\n        const telemetry = await telemetryRes.json();\n\n        const turbineLocationMap = turbines.reduce((acc, turbine) => {\n          acc[turbine.turbine_id] = turbine.location;\n          return acc;\n        }, {});\n\n        const dataByLocation = telemetry.reduce((acc, item) => {\n          const location = turbineLocationMap[item.turbine_id];\n          if (location) {\n            if (!acc[location]) {\n              acc[location] = [];\n            }\n            acc[location].push({\n              windSpeed: item.wind_speed_mph,\n              powerOutput: item.power_output_kw,\n            });\n          }\n          return acc;\n        }, {});\n\n        setData(dataByLocation);\n      } catch (error) {\n        console.error(\"Error fetching correlation data:\", error);\n        setData({}); // Set to empty object on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const COLORS = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))'];\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-96\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Wind Speed vs. Power Output by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n            <XAxis\n              type=\"number\"\n              dataKey=\"windSpeed\"\n              name=\"Wind Speed\"\n              unit=\" mph\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis\n              type=\"number\"\n              dataKey=\"powerOutput\"\n              name=\"Power Output\"\n              unit=\" kW\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Power Output (kW)', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip\n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n            />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            {Object.keys(data).map((location, index) => (\n              <Scatter\n                key={location}\n                name={location}\n                data={data[location]}\n                fill={COLORS[index % COLORS.length]}\n                stroke={COLORS[index % COLORS.length]}\n                strokeWidth={1}\n              />\n            ))}\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const processWindPowerCorrelationData = async () => {\n  try {\n    const [turbinesRes, telemetryRes] = await Promise.all([\n      fetch('/api/data/turbines'),\n      fetch('/api/data/telemetry?limit=150')\n    ]);\n\n    if (!turbinesRes.ok || !telemetryRes.ok) {\n      throw new Error('Failed to fetch one or more data sources');\n    }\n\n    const turbines = await turbinesRes.json();\n    const telemetry = await telemetryRes.json();\n\n    const turbineLocationMap = turbines.reduce((acc, turbine) => {\n      acc[turbine.turbine_id] = turbine.location;\n      return acc;\n    }, {});\n\n    const dataByLocation = telemetry.reduce((acc, item) => {\n      const location = turbineLocationMap[item.turbine_id];\n      if (location) {\n        if (!acc[location]) {\n          acc[location] = [];\n        }\n        acc[location].push({\n          windSpeed: item.wind_speed_mph,\n          powerOutput: item.power_output_kw,\n        });\n      }\n      return acc;\n    }, {});\n\n    return dataByLocation;\n  } catch (error) {\n    console.error('Error processing wind power correlation data:', error);\n    return {}; // Return empty object for this structure\n  }\n};",
    "query": "Analyze and make me a chart for wind speed patterns by location and their correlation with power output",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753314428653_c3ux45twt",
    "name": "Turbine Status by Location",
    "description": "A stacked bar chart showing the status (Active, Warning, Offline) of wind turbines, grouped by their farm location.",
    "tags": [],
    "createdAt": "2025-07-23T23:47:08.653Z",
    "updatedAt": "2025-07-23T23:47:08.653Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocationChart() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/data/turbines');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const turbines = await response.json();\n        \n        const locationStatusCounts = turbines.reduce((acc, turbine) => {\n          const location = turbine.location;\n          const status = turbine.status;\n          if (!acc[location]) {\n            acc[location] = { location: location, Active: 0, Warning: 0, Offline: 0 };\n          }\n          if (acc[location][status] !== undefined) {\n              acc[location][status] += 1;\n          }\n          return acc;\n        }, {});\n        \n        const chartData = Object.values(locationStatusCounts);\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-80\">\n          <div className=\"text-foreground\">Loading...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 40 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"location\" \n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Farm Location', position: 'insideBottom', offset: -25, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n              interval={0}\n              angle={-30}\n              textAnchor=\"end\"\n            />\n            <YAxis \n              allowDecimals={false}\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Number of Turbines', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ fill: 'hsla(var(--border), 0.3)' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend \n              verticalAlign=\"top\" \n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            <Bar dataKey=\"Active\" stackId=\"a\" name=\"Active\" fill=\"hsl(var(--chart-1))\" />\n            <Bar dataKey=\"Warning\" stackId=\"a\" name=\"Warning\" fill=\"hsl(var(--chart-2))\" />\n            <Bar dataKey=\"Offline\" stackId=\"a\" name=\"Offline\" fill=\"hsl(var(--chart-3))\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const fetchTurbineStatusByLocation = async () => {\n  try {\n    const response = await fetch('/api/data/turbines');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const turbines = await response.json();\n    \n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const location = turbine.location;\n      const status = turbine.status;\n      if (!acc[location]) {\n        acc[location] = { location: location, Active: 0, Warning: 0, Offline: 0 };\n      }\n      if (acc[location][status] !== undefined) {\n          acc[location][status] += 1;\n      }\n      return acc;\n    }, {});\n    \n    const chartData = Object.values(locationStatusCounts);\n    \n    return chartData;\n  } catch (error) {\n    console.error('Error fetching or processing turbine data:', error);\n    return [];\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators, please make sure to use red and blue coloring",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753314568238_3rvj1tdcw",
    "name": "Turbine Status by Location",
    "description": "A stacked bar chart showing the operational status (Active, Warning, Offline) of turbines across different wind farm locations.",
    "tags": [],
    "createdAt": "2025-07-23T23:49:28.238Z",
    "updatedAt": "2025-07-23T23:49:28.238Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocationChart() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchTurbineData();\n  }, []);\n\n  const fetchTurbineData = async () => {\n    try {\n      const response = await fetch('/api/data/turbines');\n      const turbines = await response.json();\n      \n      const locationStatusCounts = turbines.reduce((acc, turbine) => {\n        const { location, status } = turbine;\n        if (!acc[location]) {\n          acc[location] = { location, Active: 0, Warning: 0, Offline: 0 };\n        }\n        if (status in acc[location]) {\n          acc[location][status]++;\n        }\n        return acc;\n      }, {});\n      \n      const chartData = Object.values(locationStatusCounts);\n      setData(chartData);\n    } catch (error) {\n      console.error('Error fetching turbine data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-96\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status Overview by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart \n            data={data} \n            margin={{ top: 20, right: 30, left: 20, bottom: 40 }}\n            layout=\"vertical\"\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              type=\"number\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Number of Turbines', position: 'insideBottom', offset: -25, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              type=\"category\"\n              dataKey=\"location\"\n              width={150}\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n            />\n            <Tooltip \n              cursor={{ fill: 'hsl(var(--border))', fillOpacity: 0.3 }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend \n              verticalAlign=\"top\" \n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))', paddingBottom: '10px' }}\n            />\n            <Bar dataKey=\"Warning\" name=\"Warning\" stackId=\"a\" fill=\"hsl(var(--chart-2))\" />\n            <Bar dataKey=\"Offline\" name=\"Maintenance/Offline\" stackId=\"a\" fill=\"hsl(var(--chart-3))\" />\n            <Bar dataKey=\"Active\" name=\"Active\" stackId=\"a\" fill=\"hsl(var(--chart-1))\" radius={[0, 4, 4, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const processTurbineStatusByLocation = async () => {\n  try {\n    const response = await fetch('/api/data/turbines');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const turbines = await response.json();\n    \n    const locationStatusCounts = turbines.reduce((acc, turbine) => {\n      const { location, status } = turbine;\n      if (!acc[location]) {\n        acc[location] = { location, Active: 0, Warning: 0, Offline: 0 };\n      }\n      if (status in acc[location]) {\n        acc[location][status]++;\n      }\n      return acc;\n    }, {});\n    \n    const chartData = Object.values(locationStatusCounts);\n    \n    return chartData;\n  } catch (error) {\n    console.error('Error fetching or processing turbine data:', error);\n    return [];\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators, please make sure to use red and blue coloring",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753317145504_39f0mcgn7",
    "name": "Turbine Status by Location",
    "description": "A stacked bar chart showing the status of wind turbines (Active, Warning, Offline) grouped by their location, excluding the Desert Winds farm.",
    "tags": [],
    "createdAt": "2025-07-24T00:32:25.504Z",
    "updatedAt": "2025-07-24T17:29:45.269Z",
    "chartType": "custom",
    "componentCode": "function TurbineStatusByLocation() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/data/turbines');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const turbines = await response.json();\n\n        // Filter out the 'Desert Winds' location as per user request\n        const filteredTurbines = turbines.filter(turbine => turbine.location !== 'Desert Winds');\n\n        const locationStatusCounts = filteredTurbines.reduce((acc, turbine) => {\n          const location = turbine.location;\n          const status = turbine.status;\n\n          if (!acc[location]) {\n            acc[location] = { location: location, Active: 0, Warning: 0, Offline: 0 };\n          }\n\n          if (status in acc[location]) {\n            acc[location][status]++;\n          }\n\n          return acc;\n        }, {});\n\n        const chartData = Object.values(locationStatusCounts);\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching turbine status data:', error);\n        setData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Card className=\"w-full\">\n        <CardContent className=\"flex items-center justify-center h-96\">\n          <div className=\"text-foreground\">Loading...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">Turbine Status by Location</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart \n            data={data} \n            margin={{ top: 20, right: 30, left: 20, bottom: 20 }} \n            barCategoryGap=\"20%\"\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"location\" \n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} \n              axisLine={{ stroke: 'hsl(var(--border))' }} \n              tickLine={{ stroke: 'hsl(var(--border))' }}\n            />\n            <YAxis \n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} \n              axisLine={{ stroke: 'hsl(var(--border))' }} \n              tickLine={{ stroke: 'hsl(var(--border))' }} \n              label={{ value: 'Number of Turbines', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ fill: 'hsla(var(--border), 0.5)' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              labelStyle={{ fontWeight: 'bold' }}\n            />\n            <Legend \n              verticalAlign=\"top\" \n              height={36}\n              wrapperStyle={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))' }}\n            />\n            <Bar dataKey=\"Active\" stackId=\"a\" fill=\"hsl(var(--chart-2))\" name=\"Active\" />\n            <Bar dataKey=\"Warning\" stackId=\"a\" fill=\"hsl(var(--chart-5))\" name=\"Warning (Maintenance)\" />\n            <Bar dataKey=\"Offline\" stackId=\"a\" fill=\"hsl(var(--muted))\" name=\"Offline\" radius={[4, 4, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const processTurbineStatusByLocation = async () => {\n  try {\n    const response = await fetch('/api/data/turbines');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const turbines = await response.json();\n\n    // Filter out the 'Desert Winds' location\n    const filteredTurbines = turbines.filter(turbine => turbine.location !== 'Desert Winds');\n\n    const locationStatusCounts = filteredTurbines.reduce((acc, turbine) => {\n      const location = turbine.location;\n      const status = turbine.status;\n\n      if (!acc[location]) {\n        acc[location] = { location: location, Active: 0, Warning: 0, Offline: 0 };\n      }\n\n      if (status in acc[location]) {\n        acc[location][status]++;\n      }\n\n      return acc;\n    }, {});\n\n    const chartData = Object.values(locationStatusCounts);\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching or processing turbine data:', error);\n    return [];\n  }\n};",
    "query": "Show turbine status overview by location with maintenance and warning indicators, please make sure to use red and blue coloring",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753383423858_makj0qha6",
    "name": "RPM & Wind Speed Correlation",
    "description": "Visualizes the correlation between rotor RPM and wind speed across various turbines.",
    "tags": [],
    "createdAt": "2025-07-24T18:57:03.858Z",
    "updatedAt": "2025-07-24T19:15:21.947Z",
    "chartType": "custom",
    "componentCode": "function RpmWindCorrelationChart() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchCorrelationData()\n  }, [])\n\n  const fetchCorrelationData = async () => {\n    try {\n      const response = await fetch('/api/data/telemetry?limit=100')\n      const telemetry = await response.json()\n      const chartData = telemetry.map(item => ({\n        windSpeed: item.wind_speed_mph,\n        rpm: item.rotor_rpm,\n        turbineId: item.turbine_id\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching correlation data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-96\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">RPM Patterns and Wind Speed Correlation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n            <XAxis \n              type=\"number\"\n              dataKey=\"windSpeed\"\n              name=\"Wind Speed\"\n              unit=\" mph\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              type=\"number\"\n              dataKey=\"rpm\"\n              name=\"Rotor RPM\"\n              unit=\" RPM\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Rotor RPM', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              formatter={(value, name) => [value, name === 'rpm' ? 'Rotor RPM' : 'Wind Speed']}\n            />\n            <Scatter \n              name=\"Turbine Reading\"\n              dataKey=\"rpm\" \n              fill=\"#ef4444\" \n              stroke=\"#ef4444\"\n              strokeWidth={1}\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchRpmWindCorrelationData = async () => {\n  try {\n    const response = await fetch('/api/data/telemetry?limit=100');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const telemetry = await response.json();\n\n    const processedData = telemetry.map(item => ({\n      turbine_id: item.turbine_id,\n      wind_speed_mph: item.wind_speed_mph,\n      rotor_rpm: item.rotor_rpm,\n      timestamp: item.timestamp\n    }));\n\n    return processedData;\n  } catch (error) {\n    console.error('Error fetching RPM and wind speed correlation data:', error);\n    return [];\n  }\n};",
    "query": "make me a dashboard to measure rpm patters with wind speed correlation",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753384004997_q62s085kg",
    "name": "RPM vs. Wind Speed Correlation",
    "description": "A scatter plot visualizing the correlation between wind speed and rotor RPM, highlighting operational patterns.",
    "tags": [],
    "createdAt": "2025-07-24T19:06:44.997Z",
    "updatedAt": "2025-07-24T19:15:45.104Z",
    "chartType": "custom",
    "componentCode": "function RpmWindSpeedCorrelationChart() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchCorrelationData()\n  }, [])\n\n  const fetchCorrelationData = async () => {\n    try {\n      const response = await fetch('/api/data/telemetry?limit=100')\n      const telemetry = await response.json()\n      const chartData = telemetry.map(item => ({\n        windSpeed: item.wind_speed_mph,\n        rpm: item.rotor_rpm\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching correlation data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">RPM vs. Wind Speed Correlation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"windSpeed\" \n              type=\"number\"\n              name=\"Wind Speed\"\n              unit=\" mph\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              dataKey=\"rpm\" \n              type=\"number\"\n              name=\"Rotor RPM\"\n              unit=\" RPM\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Rotor RPM', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              formatter={(value, name) => [value, name]}\n            />\n            <Scatter \n              name=\"Telemetry Reading\"\n              dataKey=\"rpm\" \n              fill=\"#dc2626\" \n              stroke=\"#dc2626\"\n              strokeWidth={1}\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchRpmWindSpeedData = async () => {\n  try {\n    const response = await fetch('/api/data/telemetry?limit=100')\n    const telemetry = await response.json()\n    \n    const chartData = telemetry.map(item => ({\n      windSpeed: item.wind_speed_mph,\n      rpm: item.rotor_rpm\n    }))\n    \n    return chartData\n  } catch (error) {\n    console.error('Error fetching RPM and wind speed data:', error)\n    return []\n  }\n}",
    "query": "make me a dashboard to measure rpm patters with wind speed correlation",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753384223322_69uy61raq",
    "name": "RPM vs. Wind Speed Correlation",
    "description": "A scatter plot visualizing the correlation between wind speed and rotor RPM, highlighting operational patterns.",
    "tags": [],
    "createdAt": "2025-07-24T19:10:23.322Z",
    "updatedAt": "2025-07-24T19:10:23.322Z",
    "chartType": "custom",
    "componentCode": "function RpmWindCorrelationChart() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchTelemetryData()\n  }, [])\n\n  const fetchTelemetryData = async () => {\n    try {\n      const response = await fetch('/api/data/telemetry?limit=100')\n      const telemetry = await response.json()\n      const chartData = telemetry.map(item => ({\n        windSpeed: item.wind_speed_mph,\n        rpm: item.rotor_rpm\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-64\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">RPM vs. Wind Speed Correlation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n            <XAxis \n              type=\"number\"\n              dataKey=\"windSpeed\" \n              name=\"Wind Speed\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              type=\"number\"\n              dataKey=\"rpm\" \n              name=\"Rotor RPM\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Rotor RPM', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n            />\n            <Scatter \n              name=\"Turbine Reading\" \n              dataKey=\"rpm\"\n              fill=\"#ef4444\" // Red for nodes as requested\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchRpmWindCorrelationData = async () => {\n  try {\n    const response = await fetch('/api/data/telemetry?limit=100');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const telemetryData = await response.json();\n    \n    const chartData = telemetryData.map(item => ({\n      windSpeed: item.wind_speed_mph,\n      rpm: item.rotor_rpm\n    }));\n    \n    return chartData;\n  } catch (error) {\n    console.error(\"Error fetching RPM correlation data:\", error);\n    return [];\n  }\n}",
    "query": "make me a dashboard to measure rpm patters with wind speed correlation using red for the color of the nodes on the plot",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753387701683_63qgyawvz",
    "name": "RPM vs. Wind Speed Correlation",
    "description": "A scatter plot showing the correlation between rotor RPM and wind speed for wind turbines, highlighting operational patterns.",
    "tags": [],
    "createdAt": "2025-07-24T20:08:21.683Z",
    "updatedAt": "2025-07-24T20:08:21.683Z",
    "chartType": "custom",
    "componentCode": "function RpmWindSpeedCorrelation() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchTelemetryData();\n  }, []);\n\n  const fetchTelemetryData = async () => {\n    try {\n      const response = await fetch('/api/data/telemetry?limit=100');\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.status}`);\n      }\n      const telemetry = await response.json();\n      const chartData = telemetry.map(item => ({\n        windSpeed: item.wind_speed_mph,\n        rpm: item.rotor_rpm,\n      }));\n      setData(chartData);\n    } catch (error) {\n      console.error('Error fetching telemetry data:', error);\n      setData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-[484px]\">\n          <div className=\"text-foreground\">Loading...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">RPM Patterns vs. Wind Speed Correlation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              type=\"number\"\n              dataKey=\"windSpeed\" \n              name=\"Wind Speed\"\n              unit=\" mph\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              type=\"number\"\n              dataKey=\"rpm\" \n              name=\"Rotor RPM\"\n              unit=\" RPM\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Rotor RPM', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n              formatter={(value, name) => [value, name]}\n            />\n            <Scatter \n              name=\"Data Point\" \n              dataKey=\"rpm\"\n              fill=\"#ef4444\" \n              stroke=\"#ef4444\"\n              strokeWidth={1}\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}",
    "dataFunction": "const fetchRpmWindSpeedData = async () => {\n  try {\n    const response = await fetch('/api/data/telemetry?limit=100');\n    if (!response.ok) {\n      throw new Error(`API call failed with status: ${response.status}`);\n    }\n    const telemetry = await response.json();\n    \n    const chartData = telemetry.map(item => ({\n      windSpeed: item.wind_speed_mph,\n      rpm: item.rotor_rpm,\n    }));\n    \n    return chartData;\n  } catch (error) {\n    console.error(\"Error fetching RPM vs Wind Speed data:\", error);\n    return [];\n  }\n};",
    "query": "make me a dashboard to measure rpm patters with wind speed correlation using red for the color of the nodes on the plot",
    "createdFromChat": true
  },
  {
    "id": "dashboard_1753391818290_ufh6es2vw",
    "name": "RPM vs. Wind Speed Correlation",
    "description": "A scatter plot visualizing the relationship between wind turbine rotor RPM and wind speed.",
    "tags": [],
    "createdAt": "2025-07-24T21:16:58.290Z",
    "updatedAt": "2025-07-24T21:16:58.290Z",
    "chartType": "custom",
    "componentCode": "function RpmVsWindSpeedCorrelation() {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/data/telemetry?limit=100')\n      const telemetry = await response.json()\n      const chartData = telemetry.map(item => ({\n        windSpeed: item.wind_speed_mph,\n        rpm: item.rotor_rpm,\n      }))\n      setData(chartData)\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) return <Card><CardContent className=\"flex items-center justify-center h-96\"><div className=\"text-foreground\">Loading...</div></CardContent></Card>\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-card-foreground\">RPM vs Wind Speed Correlation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <ScatterChart margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n            <CartesianGrid stroke=\"hsl(var(--border))\" strokeDasharray=\"3 3\" />\n            <XAxis \n              type=\"number\"\n              dataKey=\"windSpeed\" \n              name=\"Wind Speed\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Wind Speed (mph)', position: 'insideBottom', offset: -10, style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <YAxis \n              type=\"number\"\n              dataKey=\"rpm\" \n              name=\"Rotor RPM\"\n              tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n              axisLine={{ stroke: 'hsl(var(--border))' }}\n              label={{ value: 'Rotor RPM', angle: -90, position: 'insideLeft', style: { fill: 'hsl(var(--muted-foreground))', fontSize: 14 } }}\n            />\n            <Tooltip \n              cursor={{ strokeDasharray: '3 3', stroke: 'hsl(var(--border))' }}\n              contentStyle={{ \n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--card-foreground))',\n                fontSize: '12px'\n              }}\n            />\n            <Scatter \n              name=\"RPM vs Wind Speed\"\n              data={data}\n              fill=\"#ef4444\" \n              stroke=\"#ef4444\"\n              strokeWidth={1}\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}",
    "dataFunction": "const fetchRpmWindSpeedData = async () => {\n  try {\n    const response = await fetch('/api/data/telemetry?limit=100');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const telemetry = await response.json();\n    \n    const chartData = telemetry.map(item => ({\n      windSpeed: item.wind_speed_mph,\n      rpm: item.rotor_rpm,\n    }));\n    \n    return chartData;\n  } catch (error) {\n    console.error('Error fetching RPM and wind speed data:', error);\n    return [];\n  }\n};",
    "query": "make me a dashboard to measure rpm patters with wind speed correlation using red for the color of the nodes on the plot",
    "createdFromChat": true
  }
]